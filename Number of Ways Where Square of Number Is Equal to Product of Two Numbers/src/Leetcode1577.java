import java.util.HashMap;

public class Leetcode1577 {

    // 注意乘积溢出...
    public int numTriplets(int[] nums1, int[] nums2) {

        int res = 0;
        HashMap<Long, Integer> product1 = new HashMap<>();
        for (int x : nums1) {
            product1.put((long) x * (long) x, product1.getOrDefault((long) x * (long) x, 0) + 1);
        }
        HashMap<Long, Integer> product2 = new HashMap<>();
        for (int x : nums2) {
            product2.put((long) x * (long) x, product2.getOrDefault((long) x * (long) x, 0) + 1);
        }
        for (int i = 0; i < nums1.length; i++) {
            for (int j = i + 1; j < nums1.length; j++) {
                long pro = (long) nums1[i] * (long) nums1[j];
                res += product2.getOrDefault(pro, 0);
            }
        }
        for (int i = 0; i < nums2.length; i++) {
            for (int j = i + 1; j < nums2.length; j++) {
                long pro = (long) nums2[i] * (long) nums2[j];
                res += product1.getOrDefault(pro, 0);
            }
        }
        return res;
    }

    public static void main(String[] args) {
        int[] nums1 =
                new int[] {
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000
                };
        int[] nums2 =
                new int[] {
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                    100000, 100000, 100000, 100000, 100000
                };
        Leetcode1577 ins = new Leetcode1577();
        ins.numTriplets(nums1, nums2);
    }
}
